<?php include 'header.php';?>

    <div class="heading" style="background-image: url(images/headlines.jpg)";>
        <h1>تابع</h1>
    </div>

    <!-- comment section -->

    <section class="main-content">
        <div class="content">
            <p>در این آموزش به کمک مثال های مختلف با تابع و عبارت های تابعی در جاوا اسکریپت (JavaScript) آشنا خواهید شد.</p>
            <p>یک تابع مجموعه ای از کدهاست که وظیفه خاصی را انجام می دهد.</p>
            <p>فرض کنید می خواهید برنامه ای بنویسید که در آن یک دایره رسم و سپس رنگ آمیزی می شود. برای حل این مسئله می توانید دو تابع ایجاد کنید:</p>
            <ul><li>تابعی برای رسم دایره</li>
            <li>تابعی برای رنگ آمیزی دایره</li></ul>
            <p>شکست و تقسیم یک مسئله پیچیده به قسمت ها و مسائل کوچکتر باعث می شود تا درک برنامه راحت تر شود و علاوه بر این میتوان این تکه کدها را دوباره استفاده کرد.</p>
            <p>جاوا اسکریپت تعداد زیادی توابع داخلی و آماده دارد. مانند تابع ()Math.sqrt که برای محاسبه ریشه مربع یک عدد به کار می رود.</p>
            <h1>تعریف تابع</h1>
            <p>ساختار تعریف یک تابع:</p>
            <div class="code">
                <p>function nameOfFunction () {  <br>
                
                // بدنه تایع <br>
                
                }</p>
            </div>
            <ul><li>تعریف تابع با کلمه کلیدی function شروع می شود.</li>
            <li>سپس نام تابع نوشته می شود. قوانین نامگذاری توابع مشابه با نامگذاری متغیرها است. بهتر است نام تابع توصیفی از عملکرد آن باشد. به عنوان مثال اگر تابعی برای جمع کردن اعداد می نویسید می توانید نام آن را add یا addNumbers انتخاب کنید.</li>
            <li>بدنه تابع داخل {} نوشته می شود.</li></ul>
            <div class="code">
                <p>// greet تعریف تابعی با نام <br>
                
                function greet() { <br>
                
                console.log(“Hello there”); <br>
                
                }</p>
            </div>
            <h1>فراخوانی تابع</h1>
            <p>در برنامه بالا یک تابع با نام ()greet تعریف شده است. برای استفاده از این تابع باید آن را فراخوانی کنید.</p>
            <p>شیوه فراخوانی تابع ()greet به شکل زیر است:</p>
            <div class="code">
                <p>// فراخوانی تابع <br>
                
                greet();</p>
            </div>
            <p>عملکرد تابع درجاوا اسکریپت:</p>
            <div class="image">
            <img src="images/func1.jpg" alt=""></div>
            <p>مثال ۱: نمایش یک متن</p>
            <div class="code">
                <p>// برنامه نمایش یک متن <br>
                
                // تعریف تابع <br>
                
                function greet() { <br>
                
                console.log(“Hello there!”); <br>
                
                } <br>
                
                // فراخوانی تابع <br>
                
                greet();</p>
            </div>
            <p>خروجی</p>
            <div class="code">
                <p>Hello there!</p>
            </div>
            <h1>پارامترهای تابع</h1>
            <p>تابع می تواند دارای پارامترهای ورودی باشد. پارامتر مقداری است که هنگام تعریف تابع به آن ارسال می شود.</p>
            <p>عملکرد تابع با پارامتر:</p>
            <div class="image">
            <img src="images/func2.jpg" alt=""></div>
            <p><b>نکته:</b> در تعریف تابع مقدار ورودی به تابع پارامتر نامیده می شود در حالیکه در هنگام فراخوانی تابع به مقدار ارسالی آرگومان گفته می شود.</p>
            <p>مثال ۲: عملکرد تابع با پارامترهای ورودی</p>
            <div class="code">
                <p>// برنامه نمایش متن دریافت شده از کاربر <br>
                
                // تعریف تابع <br>
                
                function greet(name) { <br>
                
                console.log(“Hello ” + name + “:)”); <br>
                
                } <br>
                
                // اسم متغیر برای پارامتر تابع می تواند متفاوت باشد <br>
                
                let name = prompt(“Enter a name: “); <br>
                
                // فراخوانی تابع <br>
                
                greet(name);</p>
            </div>
            <p>خروجی</p>
            <div class="code">
                <p>Enter a name: Simon <br>
                
                Hello Simon 🙂</p>
            </div>
            <p>در این برنامه تابع greet همراه با پارامتر name تعریف شده است. از کاربر خواسته می شود تا یک نام وارد کند سپس وقتی تابع فراخوانی می شود، این مقدار دریافتی به عنوان آرگومان به تابع ارسال می شود.</p>
            <p><b>نکته:</b> نام پارامتر در هنگام تعریف تابع با نام آرگومان در زمان فراخوانی تابع می تواند متفاوت باشد و الزامی برای یکسان بودن آنها وجود ندارد.</p>
            <p>مثال ۳: جمع دو عدد</p>
            <div class="code">
                <p>// برنامه جمع دو عدد با استفاده از تابع <br>
                
                // تعریف تابع <br>
                
                function add(a, b) { <br>
                
                console.log(a + b); <br>
                
                } <br>
                
                // فراخوانی تابع <br>
                
                add(3,4); <br>
                
                add(2,9);</p>
            </div>
            <p>خروجی</p>
            <div class="code">
                <p>۷ <br>
                
                ۱۱</p>
            </div>
            <p>در این برنامه از تابع add برای محاسبه مجموع دو عدد استفاده می شود.</p>
            <ul><li>تابع با دو پارامتر a و b تعریف شده است.</li>
            <li>تابع دو بار فراخوانی می شود، فرخوانی اول با دو آرگومان ۳ و ۴ و فرخوانی دوم با دو آرگومان ۲ و ۹٫</li></ul>
            <p>می توانید یک تابع را بنویسید و سپس چندین بار به دلایل مختلف آن را فراخوانی کنید، در واقع یک تابع را می توان به دفعات دلخواه فراخوانی کرد.</p>
            <h1>مقدار بازگشتی از تابع</h1>
            <p>از دستور return برای برگرداندن یک مقدار از تابع (هنگام فراخوانی) استفاده می شود.</p>
            <p>دستور return تابع را به اتمام می رساند و کدهای بعد از return اجرا نمی شوند.</p>
            <p>اگر تابعی دستور return را نداشته باشد، مقدار undefined را برمی گرداند.</p>
            <p>عملکرد تابع با دستور return در جاوا اسکریپت:</p>
            <div class="image">
            <img src="images/func3.jpg" alt=""></div>
            <p>مثال ۴: محاسبه مجموع دو عدد</p>
            <div class="code">
                <p>// برنامه محاسبه مجموع دو مقدار <br>
                
                // تعریف تابع <br>
                
                function add(a, b) { <br>
                
                return a + b; <br>
                
                } <br>
                
                // گرفتن ورودی از کاربر <br>
                
                let number1 = parseFloat(prompt(“Enter first number: “)); <br>
                
                let number2 = parseFloat(prompt(“Enter second number: “)); <br>
                
                // فراخوانی تابع <br>
                
                let result = add(number1,number2); <br>
                
                // نمایش نتیجه <br>
                
                console.log(“The sum is ” + result);</p>
            </div>
            <p>خروجی</p>
            <div class="code">
                <p>Enter first number: 3.4 <br>
                
                Enter second number: 4 <br>
                
                The sum is 7.4</p>
            </div>
            <p>در این برنامه با استفاده از دستور return در تابع add مجموع دو عدد برگشت داده می شود. با فراخوانی تابع مقدار برگشتی در متغیر result ذخیره می شود.</p>
            <p>از parseFloat برای تبدیل رشته ورودی به عدد اعشار استفاده شده است.</p>
            <h1>مزایای استفاده از تابع</h1>
            <ul><li>کد قابلیت استفاده مجدد خواهد داشت. می توانید تابع را یکبار تعریف کنید و برحسب نیاز در قسمت های مختلف برنامه استفاده کنید.</li>
            <li>تقسیم برنامه به تکه کدهای کوچکتر آن را ساده تر خواهد کرد.</li>
            <li>خوانایی کد را افزایش می دهد.</li></ul>
            <h1>عبارت های تابعی</h1>
            <p>تابع در جاوا اسکریپت را می توان به صورت یک عبارت نیز تعریف کرد. مثال،</p>
            <div class="code">
                <p>// بزنامه محاسبه مربع یک عدد <br>
                
                // تابع در داخل متغیر تعریف می شود <br>
                
                let x = function (num) { return num * num }; <br>
                
                console.log(x(4)); <br>
                
                // به عنوان مقدار متغیر می تواند استفاده شود <br>
                
                let y = x(3); <br>
                
                console.log(y);</p>
            </div>
            <p>خروجی</p>
            <div class="code">
                <p>۱۶ <br>
                
                ۹</p>
            </div>
            <p>در این برنامه از متغیر x برای ذخیره تابع استفاده شده است. در اینجا تابع مانند یک عبارت رفتار می کند و برای فراخوانی آن از نام متغیر استفاده می شود.</p>
            <p>به چنین تابعی تابع ناشناس نیز گفته می شود.</p>
            <p><b>نکته:</b> در ES2015 عبارت های جاوا اسکریپت (JavaScript) به شکل توابع arrow نوشته می شوند.</p>
        </div>
    </section>

    <!-- comment section -->

<?php include 'footer.php';?>