<?php include 'header.php'; ?>

<div class="heading" style="background-image: url(images/headlines.jpg)" ;>
    <h1>متغیرها و ثابت ها</h1>
</div>

<!-- content section -->

<section class="main-content">
    <div class="content">
        <p>در این آموزش با متغیرها و ثابت ها در جاوا اسکریپت (JavaScript) آشنا خواهید شد و همچنین شیوه مقداردهی اولیه و استفاده از آنها را به کمک مثال های مختلف یاد خواهید گرفت.</p>
        <h1>متغیرها در جاوا اسکریپت</h1>
        <p>در برنامه نویسی، یک متغیر یک ظرف یا نگهدارنده (محل ذخیره) برای نگهداری داده ها است.</p>
        <h1>اعلان متغیر در جاوا اسکریپت</h1>
        <p>در جاوا اسکریپت برای اعلان یا تعریف متغیرها از کلمات کلیدی var و let استفاده می شود. مثال،</p>
        <div class="code">
            <p>var x;<br>

                let y;</p>
        </div>
        <p>در اینجا x و y متغیر هستند.</p>
        <h1>مقایسه var و let در جاوا اسکریپت</h1>
        <p>از var و let برای تعریف متغیرها استفاده می شود ولی تفاوت هایی بین آنها وجود دارد.</p>
        <table cellspacing=0 class="table">
            <tr>
                <th>let</th>
                <th>var</th>
            </tr>
            <tr>
                <td>یک روش جدید برای اعلان متغیرها از نسخه ES6 (ES2015) است.</td>
                <td>در نسخه های قدیمی جاوا اسکریپت استفاده می شود.</td>
            </tr>
            <tr>
                <td>دامنه متغیر، بلوک است (در آموزش های بعدی بحث خواهد شد).</td>
                <td>دامنه متغیر، تابع است (در آموزش های بعدی بحث خواهد شد).</td>
            </tr>
            <tr>
                <td>;let y</td>
                <td>;var x</td>
            </tr>
        </table>
        <p><b>نکته</b>:توصیه می شود از let به جای var استفاده کنید. گرچه بعضی مرورگرها از let پشتیبانی نمی کنند.</p>
        <h1>مقداردهی اولیه متغیرها</h1>
        <p>برای مقداردهی به یک متغیر از عملگر انتساب = استفاده می کنیم.</p>
        <div class="code">
            <p>let x; <br>

                x = 5;</p>
        </div>
        <p>در اینجا مقدار ۵ به متغیر x اختصاص داده شده است.</p>
        <p>می توانید متغیرها را در زمان تعریف آنها نیز مقدار دهی اولیه کنید.</p>
        <div class="code">
            <p>let x = 5; <br>

                let y = 6;</p>
        </div>
        <p>در جاوا اسکریپت می توانید چند متغیر را در یک خط تعریف کنید. بین تعریف هر متغیر از علامت کاما (,) استفاده می شود.</p>
        <div class="code">
            <p>let x = 5, y = 6, z = 7;</p>
        </div>
        <p>اگر متغیری را بدون مقداردهی اولیه استفاده کنید، مقدار آن undefined (به معنای “تعریف نشده”) می شود.</p>
        <div class="code">
            <p>let x; <br>

                console.log(x); // undefined</p>
        </div>
        <p>در اینجا x نام متغیر است و چون مقداردهی نشده در نتیجه مقدار آن undefined در نظر گرفته شده است.</p>
        <h1>تغییر مقدار متغیرها</h1>
        <p>می توان مقدار ذخیره شده در هر متغیر را در طول برنامه تغییر دهید. مثال،</p>
        <div class="code">
            <p>// اختصاص داده شده است x مقدار ۵ به متغیر <br>

                let x = 5; <br>

                console.log(x); // 5 <br>

                // تغییر می کند x مقدار متغیر <br>

                x = 3; <br>

                console.log(x); // 3</p>
        </div>
        <p>مقدار یک متغیر ممکنه بارها در طول برنامه تغییر کند و به همین دلیل به آن متغیر می گوییم.</p>
        <h1>قوانین نامگذاری متغیرها در جاوا اسکریپت</h1>
        <p>برای نامگذاری متغیرها چند قانون وجود دارد:</p>
        <p>۱- نام متغیر تنها می تواند با یک حرف، آندرلاین _ و یا علامت دلار $ شروع شود. مثال،</p>
        <div class="code">
            <p>// نام های معتبر <br>

                let a = ‘hello’; <br>

                let _a = ‘hello’; <br>

                let $a = ‘hello’;</p>
        </div>
        <p>۲- نام متغیر نمی تواند با عدد شروع شود. مثال،</p>
        <div class="code">
            <p>// نام نامعتبر <br>

                let 1a = ‘hello’; // خطا</p>
        </div>
        <p>۳- جاوا اسکریپت به حروف کوچک و بزرگ حساس است. بنابراین متغیرهای y و Y، دو متغیر متفاوت به شمار می روند. مثال،</p>
        <div class="code">
            <p>let y = “hi”; <br>

                let Y = 5; <br>

                console.log(y); // hi <br>

                console.log(Y); // 5</p>
        </div>
        <p>۴- از کلمات کلیدی نمی توان برای نامگذاری متغیرها استفاده کرد. مثال،</p>
        <div class="code">
            <p>// نام نامعتبر <br>

                let new = 5; // یک کلمه کلیدی است newخطا!</p>
        </div>
        <p><b>نکات</b></p>
        <ul>
            <li>گرچه می توانید نام متغیرها را به دلخواه انتخاب کنید اما بهتر است از یک نام مرتبط استفاده کنید. به طور مثال برای نامگذاری متغیری که برای ذخیره تعداد سیب ها استفاده می شود بهتر است به جای x یا n از نام های apples و یا numberOfApples استفاده کنید.</li>
            <li>در جاوا اسکریپت اگر نام متغیر بیشتر از یک کلمه داشته باشد، به صورت camelCase نوشته می شود. در camelCase (یا نگارش شتری) برای نوشتن ترکیبی از کلمات، هر کلمه به جز کلمه اول با حرف بزرگ شروع می‌شود و بقیه حروف آن با حروف کوچک نوشته می‌شود. به طور مثال، firstName، annualSalary و ….</li>
        </ul>
        <h1>ثابت ها در جاوا اسکریپت</h1>
        <p>کلمه کلیدی const نیز در نسخه ES6(ES2015) برای تعریف ثابت ها معرفی شد. مثال،</p>
        <div class="code">
            <p>const x = 5;</p>
        </div>
        <p>پس از مقداردهی اولیه یک ثابت نمی توانیم مقدار آن را تغییر دهیم.</p>
        <div class="code">
            <p>const x = 5; <br>

                x = 10; // خطا! </p>
        </div>
        <p> مقدار ثابت را نمی توان تغییر داد</p>
        <div class="code">
            <p>console.log(x)</p>
        </div>
        <p>به عبارت دیگر ثابت ها نوعی متغیر هستند که مقدار آنها قابل تغییر نیست.</p>
        <p>همچنین حتما باید در زمان تعریف یک ثابت، مقدار آن را نیز تعیین کنید. مثال،</p>
        <div class="code">
            <p>const x; // خطا! ثابت مقداردهی نشده است <br>

                x = 5; <br>

                console.log(x)</p>
        </div>
        <p><b>نکته: </b>اگر مطمئن هستید که مقدار یک متغیر در کل برنامه تغییر نخواهد کرد توصیه می شود آن متغیر را به صورت یک ثابت تعریف کنید. البته بعضی از مرورگرها از ثابت ها پشتیبانی نمی کنند.</p>
    </div>
</section>

<!-- content section -->

<?php include 'footer.php'; ?>